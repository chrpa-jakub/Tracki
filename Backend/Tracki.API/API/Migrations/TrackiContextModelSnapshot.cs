// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrackiBackEnd.Model;

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class TrackiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Czech_Czechia.1250")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TrackiBackEnd.Model.AccountType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("typeID");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typeName");

                    b.HasKey("TypeId")
                        .HasName("accountTypes_pkey");

                    b.ToTable("accountTypes");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artistID");

                    b.Property<string>("ArtistLocation")
                        .HasColumnType("text")
                        .HasColumnName("artistLocation");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("artistName");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userID");

                    b.HasKey("ArtistId");

                    b.HasIndex(new[] { "UserId" }, "fki_FK_userID");

                    b.ToTable("artists");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("photoID");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.HasKey("PhotoId");

                    b.ToTable("photos");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Release", b =>
                {
                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer")
                        .HasColumnName("releaseID");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("albumName");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artistID");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("photoID");

                    b.Property<int>("ReleaseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("releaseTypeID");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("integer")
                        .HasColumnName("yearOfRelease");

                    b.HasKey("ReleaseId");

                    b.HasIndex(new[] { "ArtistId" }, "fki_FK_artistID");

                    b.HasIndex(new[] { "ReleaseTypeId" }, "fki_FK_releaseTypeID");

                    b.HasIndex(new[] { "PhotoId" }, "fki_Fk_PhotoIDRelease");

                    b.ToTable("releases");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.ReleaseType", b =>
                {
                    b.Property<int>("ReleaseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("releaseTypeID");

                    b.Property<string>("ReleaseTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("releaseTypeName");

                    b.HasKey("ReleaseTypeId");

                    b.ToTable("releaseTypes");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Song", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("songID");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer")
                        .HasColumnName("releaseID");

                    b.Property<string>("SongLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("songLocation");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("songName");

                    b.HasKey("SongId");

                    b.HasIndex(new[] { "ReleaseId" }, "fki_FK_albumID");

                    b.ToTable("songs");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userID")
                        .HasIdentityOptions(null, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("accountTypeID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordHash");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("photoID");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("userName");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "PhotoId" }, "fki_FK_PhotoIDUser");

                    b.HasIndex(new[] { "AccountTypeId" }, "fki_FK_accountTypeID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Artist", b =>
                {
                    b.HasOne("TrackiBackEnd.Model.User", "User")
                        .WithMany("Artists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_userID")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Release", b =>
                {
                    b.HasOne("TrackiBackEnd.Model.Artist", "Artist")
                        .WithMany("Releases")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_artistID")
                        .IsRequired();

                    b.HasOne("TrackiBackEnd.Model.Photo", "Photo")
                        .WithMany("Releases")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("Fk_PhotoIDRelease");

                    b.HasOne("TrackiBackEnd.Model.ReleaseType", "ReleaseType")
                        .WithMany("Releases")
                        .HasForeignKey("ReleaseTypeId")
                        .HasConstraintName("FK_releaseTypeID")
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Photo");

                    b.Navigation("ReleaseType");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Song", b =>
                {
                    b.HasOne("TrackiBackEnd.Model.Release", "Release")
                        .WithMany("Songs")
                        .HasForeignKey("ReleaseId")
                        .HasConstraintName("FK_releaseID")
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.User", b =>
                {
                    b.HasOne("TrackiBackEnd.Model.AccountType", "AccountType")
                        .WithMany("Users")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_accountTypeID")
                        .IsRequired();

                    b.HasOne("TrackiBackEnd.Model.Photo", "Photo")
                        .WithMany("Users")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_PhotoIDUser");

                    b.Navigation("AccountType");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.AccountType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Artist", b =>
                {
                    b.Navigation("Releases");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Photo", b =>
                {
                    b.Navigation("Releases");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.Release", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.ReleaseType", b =>
                {
                    b.Navigation("Releases");
                });

            modelBuilder.Entity("TrackiBackEnd.Model.User", b =>
                {
                    b.Navigation("Artists");
                });
#pragma warning restore 612, 618
        }
    }
}
